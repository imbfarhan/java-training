class JavaAnnotationParent
{
    protected void methodToOverride()
    {
        System.out.println("This is parent method without override");
    }
}

class JavaAnnotationChild extends JavaAnnotationParent
{
    //@Override : Helps to override a method from the parent. Warns incase if parent method param/name is changed or if method is not present in parent. Helps to give surity that methods are overwritten.
    @Override
    protected void methodToOverride()
    {
        System.out.println("This is parent method with override");
    }

    //@Deprecated : Used to mark that a method has been deprecated.
    @Deprecated
    void deprecatedMethod()
    {
        System.out.println("This method is deprecated");
    }
}

//@FunctionalInterface : Used to mark an interface as a functional interface. 
//A functional interface has only one unimplemented abstract method.
@FunctionalInterface
interface MyFunctionalInterface{
    void basicFunctionalInterface();
}

public class JavaAnnotations {
    
    //@SupressWarnings : Used to supress warnings generated by the compiler.
    @SuppressWarnings("deprecation")
    public static void main(String[] args) {
        
        JavaAnnotationChild jac = new JavaAnnotationChild();
        jac.methodToOverride();
        
        jac.deprecatedMethod();
    }
}
